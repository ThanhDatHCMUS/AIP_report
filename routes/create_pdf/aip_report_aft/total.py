import asyncio
import asyncpg
import time
from . import task1
from . import task2
from . import task3
from . import task4


from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from datetime import datetime
# Th√¥ng tin k·∫øt n·ªëi PostgreSQL
DB_CONFIG = {
    "database": "postgres",
    "user": "runner_vesta",
    "password": "93pFCR0ALmu2aIVrRk4vIIfkT2055WBFDC94cKNus85FItqy8jfIDnmD6aV8rD4K",
    "host": "118.69.83.26",
    "port": "5444",
}

# H√†m t·∫°o PDF b√°o c√°o
def create_pdf_report(date_key, query_index_data, advance_result, decline_result, stock_volumn, highest_volatility, stock_data_task3, foreign_trading, incountry_trading, elapsed_time):
    pdf_path = f"{date_key}-morning.pdf"
    c = canvas.Canvas(pdf_path, pagesize=A4)
    width, height = A4

    # ƒêƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát
    pdfmetrics.registerFont(TTFont('DejaVu', './ttf/DejaVuSans.ttf'))

    # C√†i ƒë·∫∑t font ti√™u ƒë·ªÅ
    c.setFont("DejaVu", 12)

    c.drawCentredString(width / 2, height - 20, f"B√ÅO C√ÅO K·∫æT TH√öC PHI√äN GIAO D·ªäCH BU·ªîI S√ÅNG: {date_key}")

    y_position = height - 120  # ƒêi·ªÅu ch·ªânh v·ªã tr√≠ xu·ªëng d∆∞·ªõi

    # C√†i ƒë·∫∑t font n·ªôi dung
    c.setFont("DejaVu", 12)
    y_position = height - 50

    # Ghi n·ªôi dung v√†o PDF
    sections = [
        ("1. T·ªïng k·∫øt th·ªã tr∆∞·ªùng", query_index_data + "\n"),
        ("2. Bi·∫øn ƒë·ªông c·ªï phi·∫øu n·ªïi b·∫≠t", advance_result + "\n" + decline_result + "\n" + stock_volumn + "\n" + highest_volatility + "\n"),
        ("3. Di·ªÖn bi·∫øn ng√†nh ngh·ªÅ", stock_data_task3 + "\n"),
        ("4. Giao D·ªãch Kh·ªëi Ngo·∫°i v√† T·ªï Ch·ª©c", foreign_trading + "\n" + incountry_trading + "\n"),
    ]

    for title, content in sections:
        c.setFont("DejaVu", 12)
        c.drawString(50, y_position, title)
        y_position -= 20
        c.setFont("DejaVu", 12)
        for line in content.split("\n"):
            c.drawString(50, y_position, line)
            y_position -= 15
            if y_position < 0:  # Xu·ªëng trang m·ªõi n·∫øu h·∫øt trang
                c.showPage()
                c.setFont("DejaVu", 12)
                y_position = height - 50

    # L∆∞u PDF
    c.save()
    print(f"File b√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o: {pdf_path}")

async def fetch_data(date_key):
    """S·ª≠ d·ª•ng connection pool ƒë·ªÉ ch·∫°y t·∫•t c·∫£ truy v·∫•n ƒë·ªìng th·ªùi"""
    async with asyncpg.create_pool(**DB_CONFIG) as pool:

            # Ch·∫°y t·∫•t c·∫£ truy v·∫•n song song
        results = await asyncio.gather(
            task2.query_top_5_advance_stocks(pool, date_key),
            task2.query_top_5_decline_stocks(pool, date_key),
            task2.highest_volume_stocks(pool, date_key),
            task2.highest_volatility_stock(pool, date_key),
            task1.query_index_data(pool, date_key),
            task3.fetch_stock_data(pool, date_key),
            task4.fetch_foreign_trading(pool, date_key),
            task4.fetch_incountry_trading(pool, date_key),
        )

        return results

async def create_new_afternoon(date_key):


    # L·∫•y d·ªØ li·ªáu t·ª´ PostgreSQL
    advance_result, decline_result, stock_volumn, highest_volatility, query_index_data, stock_data_task3, foreign_trading, incountry_trading = await fetch_data(date_key)

    end_time = time.time()

    elapsed_time = end_time
    # G·ªçi h√†m t·∫°o PDF
    create_pdf_report(date_key, query_index_data, advance_result, decline_result, stock_volumn, highest_volatility, stock_data_task3, foreign_trading, incountry_trading, elapsed_time)

# if __name__ == "__main__":
#     date_key = "2022-12-13"  # Ng√†y c·∫ßn truy v·∫•n
#     start_time = time.time()
#     print(f"\nüïí ƒêang ch·∫°y truy v·∫•n l√∫c: {time.strftime('%Y-%m-%d %H:%M:%S')}")
#     asyncio.run(main(date_key))
